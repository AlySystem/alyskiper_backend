input SkiperWalletInput {
    id: Int
    iduser: Int!
    amount: Float
    idcurrency: Int!
    idcountry: Int!
    minimun: Float!
    bretirar: Boolean!
    date_in: DateTime!
}

type SkiperWalletDto {
    id: Int
    amount: Float!
    date_in: DateTime!
    minimun: Float!
    bretirar: Boolean!
    userID: UserDto
    currencyID: CurrencyDto
    countryID: countrieDto
}

type SendDataForPayCrypto {
    crypto:String
    company:String
    walletReceive:String
    amounSend:Float
    numberFact:Int
    nameUser:String
    state:Boolean
}

type Query {
    skiperwallets: [SkiperWalletDto!]!
    getAllSkiperWalletsByUserId(iduser: Int!): [SkiperWalletDto!]!
    searchSkiperWallet(id:Int):SkiperWalletDto
    getAmountByCrypto(crypto:String, amount:Float, iduser:Int,idcountry:Int, idpackage:Int):SendDataForPayCrypto
}
type Mutation {
    registerSkiperWallet(input: SkiperWalletInput!):SkiperWalletDto
    updateSkiperWallet(input: SkiperWalletInput): SkiperWalletDto
    registerDepositWallet(idwallet: Int!,idtransaction: Int!,idpayment_method:Int!, deposit:Float!, is_user:Boolean,description:String!): SkiperWalletDto
    requestWithdrawalOrTransactionReversed(idwallet: Int!,idtransaction: Int!,idpayment_method:Int!, amount:Float!, description:String!): SkiperWalletDto
    validateHash(hash:String!, crypto:String!, total_real:Float, total_crypto:Float, lat:Float, long:Float, ip:String, email:String, is_user:Boolean):SkiperWalletDto
}