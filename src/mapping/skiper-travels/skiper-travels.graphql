input SkiperTravelsInput {
    id: Int
    idusers: Int!
    iddriver: Int!
    lat_initial: Float!
    lng_initial: Float!
    lat_final_seggested: Float
    lng_final_seggested: Float
    lat_final: Float!
    lng_final: Float!
    date_init: DateTime
    distance: Float!
    time: Float!
    Total: Float
    address_initial: String!
    address_final: String!
    address_suggested: String
    idcurrency: Int!
    idpayment_methods: Int!
    categoryId: Int
}


type SkiperTravelsDto {
    id: Int
    lat_initial: Float
    lng_initial: Float
    lat_final_seggested: Float
    lng_final_seggested: Float
    lat_final: Float
    lng_final: Float
    date_init: DateTime
    date_final: DateTime
    distance: Float
    total: Float
    address_initial: String
    address_final: String
    address_suggested: String
    duration: Float
    skiperTravelsTracing: [SkiperTravelsTracingDto]
    users: UserDto
    skiperagent: SkiperAgentDto
    currency: CurrencyDto
    paymentMethods: PaymentMethodDto
    skipercattravel: SkiperCatTravelDto
}

type TravelTarifaDTo {
    pricebase: Float
    priceminute: Float
    priceckilometer: Float
    priceminimun: Float
}

type Query {
    getAllSkiperTravels: [SkiperTravelsDto!]
    CalculateTariff(city: String!, idcategoriaviaje: Int!, lat:Float!, lng:Float!): TravelTarifaDTo!
    getTravels(idagent: Int!):[SkiperTravelsDto!]
    getTravelByAgentId(idagent: Int!): SkiperTravelsDto!
    getTravelByUserId(iduser: Int!): SkiperTravelsDto
}

type Mutation {
    GenerateTravel(inputviaje: SkiperTravelsInput!, city:String!):SkiperTravelsDto!
}